

pipeline {
  environment {
   project = 'wip-01'
   appName = 'wiserly-inventory-planner'
   registeryName = 'wip9090.azurecr.io'
   imageVersion = 'development'
   feSvcName = 'wip-as-a-service'
  }
  agent {
    kubernetes {
      label 'inventory-planner'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
}
   }
  stages {
 stage('Get latest version of code') {
        steps{
        checkout scm
      }
  }

        stage('Build UI Docker Image') {
            steps {
                container('docker') {
                    
                      sleep(time: 10, unit: "SECONDS")
                      sh("docker build -t ${registeryName}/${appName} .")
                      sh 'docker image ls' 
                }
            }
        }

      //Stage 2 : Push the image to docker registry
  stage('Push image to registry') {
       steps {
                container('docker') {
      sh "docker push ${registeryName}/${appName}"
                }}
  }
  
  //Stage 3 : Deploy Application
  stage('Deploy Application') {
    steps{
       container('kubectl') { 
              //Roll out to Dev Environment
                   // Create namespace if it doesn't exist
                   sh("kubectl get ns ${namespace} || kubectl create ns ${namespace}")
           //Update the imagetag to the latest version
                   sh("sed -i.bak 's#`${registeryName}/${appName}`:${imageVersion}#${BUILD_NUMBER}#' ./k8s/development/*.yaml")
                   //Create or update resources
                   sh("kubectl --namespace=${namespace} apply -f k8s/development/deployment.yaml")
                   sh("kubectl --namespace=${namespace} apply -f k8s/development/service.yaml")
           //Grab the external Ip address of the service
                   sh("echo http://`kubectl --namespace=${namespace} get service/${feSvcName} --output=json | jq -r '.status.loadBalancer.ingress[0].ip'` > ${feSvcName}")
                  
       }   
    } 
  }
     
}

  
}

// https://docs.microfocus.com/doc/Real_User_Monitor/9.52/EnableRemoteAPI